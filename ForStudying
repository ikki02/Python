- データフレーム.isin(リストor辞書) #オブジェクトに、引数のリストまたは辞書（なお、辞書のキーは、オブジェクトのヘッダとマッチしなければならない）の値が含まれている場合Trueを、含まれていない場合Falseを返す。
        >>> df = DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})
        >>> df.isin([1, 3, 12, 'a'])
               A      B
        0   True   True
        1  False  False
        2   True  False

- subprocess.check_output() #引数のコマンドを実行し、実行結果を出力する。実行に失敗したとき、CalledProcessErrorを返すため、try-exceptが使える。 shell引数がTrueなら指定したコマンドはシェルによって実行される。

        import subprocess
        try:
            res = subprocess.check_output('ls')
        except:
            print "Error."
        print(res.decode('sjis')) #バイナリで返されるため、文字コードをデコードする。
        #=> lsの実行結果

- os.name #pythonの実行環境のOSを知りたい場合に使用。ntはWindows, posixはLinux。
        >>> import os
        >>> os.name
        'nt'

- os.rename(path1, path2) #path1をpath2に名前変更する。

- os.remove(path) #ファイルpathを削除する。ディレクトリを削除する際は、rmdir()を使う。

- .iloc[:,0].apply(lambda x: pd.Series(x.split('\t'))) #ilocは行列を番号で指定してデータを操作できる。ここでは、全行の1列目を対象に、.apply関数でlambda関数を実行する。lambda関数は、ここではタブ区切りのリストをデータフレームに格納すると書いてある。

- pd.merge()
- rms.KIBIT_Result()
- r.get_graph_df()
- .nutnull()
- .isnull()
- .ediit_table()
- .ResultManager()
- calc_weight_score_dfs()
- obj.save()
- .recallPerReview()
- .precisionAtReview()
- ResultViewer()
- .setRecall()
- .setPrecision()
- .backToResultMap()
